image: docker:latest
services:
  - docker:dind

variables:
  DOCKER_DRIVER: overlay

stages:
  - install
  - build
  - deploy-heroku
  - deploy-aws

job-install-dependencies:
  image: node:16.13.0-alpine
  stage: install
  script:
    - npm install
    - ls -l node_modules
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - node_modules
    policy: pull
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME=="develop"'
      when: on_success
      allow_failure: false

job-build:
  image: node:16.13.0-alpine
  stage: build
  script:
    - ls -l
    - npm link @angular/cli@13.2.0
    - npm run build --prod
    - ls -l dist
  artifacts:
    paths:
      - dist
  cache:
    key:
      files:
        - package-lock.json
    paths:
      - node_modules
    policy: pull
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME=="develop"'
      when: on_success
      allow_failure: false

job-deploy-heroku:
  stage: deploy-heroku
  artifacts:
    paths:
      - imageid.txt
      - dockerfile
  before_script:
    - echo "Start Docker Image Build" .
  script:
    - docker build --file Dockerfile.gitlab --iidfile imageid.txt --tag registry.heroku.com/tyne-app .
    - docker login --username=_ --password=$HEROKU_API_KEY registry.heroku.com
    - docker push registry.heroku.com/tyne-app
    - apk add --no-cache curl
    - echo "Docker Image ID is $(cat imageid.txt)"
    - |-
      curl -X PATCH https://api.heroku.com/apps/tyne-app/formation --header "Content-Type: application/json" --header "Accept: application/vnd.heroku+json; version=3.docker-releases" --header "Authorization: Bearer $HEROKU_API_KEY" --data '{ "updates": [ { "type": "web", "docker_image": "'$(cat imageid.txt)'" } ] }'
  after_script:
    - echo "Deploy Heroku Complete"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME=="develop"'
      when: on_success
      allow_failure: false

job-deploy-aws:
  stage: deploy-aws
  environment:
    name: production
  before_script:
    - echo "Start Deploy aws"
  script:
    - echo "Deploying in aws"
  after_script:
    - echo "Complete Deploy aws"
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME=="master"'
      when: on_success
      allow_failure: false
